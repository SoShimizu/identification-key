// frontend/src/components/header/Ribbon.tsx
import React, { useState } from "react";
import {
  AppBar, Box, FormControl, InputLabel, MenuItem, Select, Toolbar, Tooltip, Typography, Switch, SelectChangeEvent, Theme, IconButton, Button, Divider, Stack
} from "@mui/material";
import TranslateIcon from '@mui/icons-material/Translate';
import AssessmentIcon from '@mui/icons-material/Assessment';
import RefreshIcon from '@mui/icons-material/Refresh';

import ReportDialog from "./ReportDialog";
import { STR } from "../../i18n";
import { AlgoOptions } from "../../hooks/useAlgoOpts";
import { BrowserOpenURL } from "../../../wailsjs/runtime/runtime";
import { HistoryItem, TaxonScore, MatrixInfo } from "../../api";

type KeyInfoLike = { name: string; path?: string };

export type RibbonProps = {
  lang: "ja" | "en";
  setLang: React.Dispatch<React.SetStateAction<"ja" | "en">>;
  keys?: KeyInfoLike[];
  activeKey?: string;
  onPickKey: (name: string) => Promise<void>;
  onRefreshKeys: () => Promise<void>;
  algo: "bayes" | "heuristic";
  setAlgo: React.Dispatch<React.SetStateAction<"bayes" | "heuristic">>;
  themeMode: "dark" | "light";
  setThemeMode: (m: "dark" | "light") => void;
  opts: AlgoOptions;
  setOpts: React.Dispatch<React.SetStateAction<AlgoOptions>>;
  matrixInfo: MatrixInfo | null;
  matrixName: string;
  history: HistoryItem[];
  scores: TaxonScore[];
};

export default function Ribbon(props: RibbonProps) {
  const { lang, setLang, keys, activeKey, onPickKey, onRefreshKeys, themeMode, setThemeMode, history } = props;
  const T = STR[lang];
  const [reportDialogOpen, setReportDialogOpen] = useState(false);

  return (
    <>
      <AppBar
        position="relative"
        color="default"
        elevation={0}
        sx={{ zIndex: (theme: Theme) => theme.zIndex.drawer + 1 }}
      >
        <Toolbar sx={{ px: 2, minHeight: 48, gap: 1 }}>
          <Typography variant="h6" sx={{ mr: 2, fontWeight: "bold", cursor: 'pointer' }} onClick={() => BrowserOpenURL("https://github.com/soshimizu/identification-key")}>
            MyKeyLogue
          </Typography>

          <Box sx={{ flex: 1 }} />

          {/* 修正：SelectとIconButtonをStackでグループ化 */}
          <Stack direction="row" spacing={1} alignItems="center">
            <FormControl size="small" sx={{ minWidth: 240 }}>
              <InputLabel>{T.ribbon.switchMatrix}</InputLabel>
              <Select label={T.ribbon.switchMatrix} value={activeKey || ""} onChange={(e: SelectChangeEvent<string>) => onPickKey(String(e.target.value))}>
                {(keys || []).map((k) => <MenuItem key={k.name} value={k.name}>{k.name}</MenuItem>)}
              </Select>
            </FormControl>
            <Tooltip title={T.ribbon.refresh_keys}>
              <IconButton onClick={onRefreshKeys}>
                <RefreshIcon />
              </IconButton>
            </Tooltip>
          </Stack>
          
          <Divider orientation="vertical" flexItem sx={{ mx: 1 }} />
          
          <Tooltip title="Export Identification Report">
              <span>
                  <Button variant="outlined" size="small" startIcon={<AssessmentIcon />} onClick={() => setReportDialogOpen(true)} disabled={history.length === 0}>
                      Report
                  </Button>
              </span>
          </Tooltip>

          <Divider orientation="vertical" flexItem sx={{ mx: 1 }}/>
          
          <FormControl size="small" variant="outlined" sx={{ minWidth: 140 }}>
              <InputLabel>Language</InputLabel>
              <Select label="Language" value={lang} onChange={(e: SelectChangeEvent<"ja" | "en">) => setLang(e.target.value as "ja" | "en")} startAdornment={<TranslateIcon fontSize="small" sx={{mr: 1, color: 'action.active'}}/>}>
              <MenuItem value="ja">日本語</MenuItem>
              <MenuItem value="en">English</MenuItem>
              </Select>
          </FormControl>

          <Tooltip title={T.ribbon.switchTheme}>
              <Switch checked={themeMode === 'dark'} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThemeMode(e.target.checked ? 'dark' : 'light')} />
          </Tooltip>
        </Toolbar>
      </AppBar>
      <ReportDialog
        open={reportDialogOpen}
        onClose={() => setReportDialogOpen(false)}
        currentLang={lang}
        {...props}
      />
    </>
  );
}