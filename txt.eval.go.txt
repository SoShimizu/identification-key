// backend/eval.go
package main

import (
	"my-id-key/backend/engine"
)

// フロントの ApplyOptions → エンジン用オプション（同名ならそのまま）
func toEngineOptions(opt ApplyOptions) engine.ApplyOptions {
	return engine.ApplyOptions{
		DefaultAlphaFP: opt.DefaultAlphaFP,
		DefaultBetaFN:  opt.DefaultBetaFN,
		AlphaFP:        opt.AlphaFP,
		BetaFN:         opt.BetaFN,
		Confidence:     opt.Confidence,
		Priors:         opt.Priors,
		WantInfoGain:   opt.WantInfoGain,
		Lambda:         opt.Lambda,
		A0:             opt.A0,
		B0:             opt.B0,
		Kappa:          opt.Kappa,
	}
}

// 中央集約の評価呼び出し
func evalApply(
	m *engine.Matrix,
	selected map[string]int,
	mode string,
	algo string,
	opt ApplyOptions,
) ([]engine.TaxonScore, []engine.TraitSuggestion, error) {

	eopt := toEngineOptions(opt)

	// エンジン側の単一関数に集約（scores + suggestions を返す）
	res, err := engine.ApplyFiltersAlgoOpt(m, selected, mode, algo, eopt)
	if err != nil {
		return nil, nil, err
	}
	// 返却スキーマはエンジンに合わせて単純化
	return res.Scores, res.Suggestions, nil
}
